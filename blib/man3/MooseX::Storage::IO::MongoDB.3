.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "MooseX::Storage::IO::MongoDB 3"
.TH MooseX::Storage::IO::MongoDB 3 "2015-06-05" "perl v5.21.8" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MooseX::Storage::IO::MongoDB \- Store and retrieve Moose objects to and from a MongoDB collection.
.SH "VERSION"
.IX Header "VERSION"
Version 0.01
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
First, configure your Moose class via a call to Storage:
.PP
.Vb 3
\&  package MyDoc;
\&  use Moose;
\&  use MooseX::Storage;
\&
\&  with Storage(io => [ \*(AqMongoDB\*(Aq => {
\&      key_attr=> \*(Aqdoc_id\*(Aq,              # which attribute should keep the unique id
\&      host   => \*(Aqmy\-mongodb\-host.com\*(Aq,  # defaults to localhost
\&      port   => $port,                  # defaults to 27017
\&      collection    => \*(Aqmy\-collection\*(Aq,
\&  }]);
\&
\&  has \*(Aqdoc_id\*(Aq  => (is => \*(Aqro\*(Aq, isa => \*(AqStr\*(Aq, required => 1);
\&  has \*(Aqtitle\*(Aq   => (is => \*(Aqrw\*(Aq, isa => \*(AqStr\*(Aq);
\&  has \*(Aqbody\*(Aq    => (is => \*(Aqrw\*(Aq, isa => \*(AqStr\*(Aq);
\&  has \*(Aqtags\*(Aq    => (is => \*(Aqrw\*(Aq, isa => \*(AqArrayRef\*(Aq);
\&  has \*(Aqauthors\*(Aq => (is => \*(Aqrw\*(Aq, isa => \*(AqHashRef\*(Aq);
\&
\&  1;
.Ve
.PP
Now you can store/load your class:
.PP
.Vb 1
\&  use MyDoc;
\&
\&  # Create a new instance of MyDoc
\&  my $doc = MyDoc\->new(
\&      doc_id   => \*(Aqfoo12\*(Aq,
\&      title    => \*(AqFoo\*(Aq,
\&      body     => \*(Aqblah blah\*(Aq,
\&      tags     => [qw(horse yellow angry)],
\&      authors  => {
\&          jdoe => {
\&              name  => \*(AqJohn Doe\*(Aq,
\&              email => \*(Aqjdoe@gmail.com\*(Aq,
\&              roles => [qw(author reader)],
\&          },
\&          bsmith => {
\&              name  => \*(AqBob Smith\*(Aq,
\&              email => \*(Aqbsmith@yahoo.com\*(Aq,
\&              roles => [qw(editor reader)],
\&          },
\&      },
\&  );
\&
\&  # Save it to cache (will be stored using key "foo12")
\&  # if no key attribute 
\&  my $doc_id = $doc\->store();
\&
\&  # Load the saved data into a new instance
\&  my $doc2 = MyDoc\->load(\*(Aqfoo12\*(Aq);
\&
\&  # This should say \*(AqBob Smith\*(Aq
\&  print $doc2\->authors\->{bsmith}{name};
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
MooseX::Storage::IO::MongoDB is a Moose role that provides an io layer for MooseX::Storage to store/load your Moose objects to a MongoDB database, as MongoDB documents.
.PP
You should understand the basics of Moose, MooseX::Storage, and MongoDB before using this module.
.PP
At a bare minimum the consuming class needs to give this role a MongoDB configuration, and a field to use as a unique key.
.SH "PARAMETERS"
.IX Header "PARAMETERS"
Following are the parameters you can set when consuming this role that configure it in different ways.
.SS "key_attr"
.IX Subsection "key_attr"
\&\*(L"key_attr\*(R" is a required parameter when consuming this role.  It specifies an attribute in your class that will provide the value to use as the MongoDB unique key when storing your object via MongDB.
.SS "host"
.IX Subsection "host"
The MongoDB host, defaults to localhost.
.SS "port"
.IX Subsection "port"
The MongoDB port, defaults to 27017
.SS "collection"
.IX Subsection "collection"
The MongoDB collection where the document should be stored.
.SH "EXPORT"
.IX Header "EXPORT"
A list of functions that can be exported.  You can delete this section
if you don't export anything, such as for a purely object-oriented module.
.SH "SUBROUTINES/METHODS"
.IX Header "SUBROUTINES/METHODS"
.SS "store"
.IX Subsection "store"
\fI\s-1INPUT\s0\fR
.IX Subsection "INPUT"
.PP
\fI\s-1OUTPUT\s0\fR
.IX Subsection "OUTPUT"
.PP
.Vb 1
\&    doc id/undef in case of errors
.Ve
.PP
\fI\s-1DESCRIPTION\s0\fR
.IX Subsection "DESCRIPTION"
.PP
.Vb 4
\&    Stores data, dies in case of errors.
\&    In case an object with the same id is already stored
\&    it is replaced with the new one.
\&    Returns the MongoDB unique document id.
.Ve
.SS "load"
.IX Subsection "load"
\fI\s-1INPUT\s0\fR
.IX Subsection "INPUT"
.PP
.Vb 1
\&    $key_value : the value of the key attribute
.Ve
.PP
\fI\s-1OUTPUT\s0\fR
.IX Subsection "OUTPUT"
.PP
The object or undef in case of error.
.PP
\fI\s-1DESCRIPTION\s0\fR
.IX Subsection "DESCRIPTION"
.PP
Gets the collection object, search for the document with
the passed id value, returns the blessed document.
.SH "AUTHOR"
.IX Header "AUTHOR"
Marco Masetti, <grubert65@gmail.com>
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-moosex\-storage\-io\-mongodb at rt.cpan.org\*(C'\fR, or through
the web interface at <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=MooseX\-Storage\-IO\-MongoDB>.  I will be notified, and then you'll
automatically be notified of progress on your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc MooseX::Storage::IO::MongoDB
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
\&\s-1RT: CPAN\s0's request tracker (report bugs here)
.Sp
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=MooseX\-Storage\-IO\-MongoDB>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
<http://annocpan.org/dist/MooseX\-Storage\-IO\-MongoDB>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<http://cpanratings.perl.org/d/MooseX\-Storage\-IO\-MongoDB>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
<http://search.cpan.org/dist/MooseX\-Storage\-IO\-MongoDB/>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2015 Marco Masetti <grubert65@gmail.com>.
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
